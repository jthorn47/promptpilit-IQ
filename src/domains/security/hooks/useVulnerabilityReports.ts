import { useState, useEffect } from 'react';
import { VulnerabilityReport } from '../types';

const mockReports: VulnerabilityReport[] = [
  {
    id: '1',
    title: 'Cross-Site Scripting (XSS) Vulnerability',
    severity: 'medium',
    cve_id: 'CVE-2024-1234',
    description: 'Reflected XSS vulnerability in user input validation',
    affected_components: ['Web Frontend', 'User Input Forms'],
    remediation_steps: [
      'Update input validation library',
      'Implement Content Security Policy',
      'Add output encoding'
    ],
    status: 'investigating',
    discovered_at: new Date(Date.now() - 172800000).toISOString()
  },
  {
    id: '2',
    title: 'Outdated Dependency Security Issue',
    severity: 'low',
    description: 'Third-party library has known security vulnerability',
    affected_components: ['Backend API'],
    remediation_steps: [
      'Update to latest library version',
      'Review breaking changes',
      'Test updated functionality'
    ],
    status: 'fixed',
    discovered_at: new Date(Date.now() - 604800000).toISOString(),
    fixed_at: new Date(Date.now() - 259200000).toISOString()
  }
];

export const useVulnerabilityReports = () => {
  const [reports, setReports] = useState<VulnerabilityReport[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchReports = async () => {
    try {
      setLoading(true);
      setTimeout(() => {
        setReports(mockReports);
        setLoading(false);
      }, 500);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch vulnerability reports');
      setLoading(false);
    }
  };

  const updateReportStatus = async (reportId: string, status: VulnerabilityReport['status']) => {
    try {
      const updatedReports = reports.map(report =>
        report.id === reportId
          ? {
              ...report,
              status,
              fixed_at: status === 'fixed' ? new Date().toISOString() : report.fixed_at
            }
          : report
      );
      setReports(updatedReports);
      return { error: null };
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to update report status';
      return { error: errorMessage };
    }
  };

  useEffect(() => {
    fetchReports();
  }, []);

  return {
    reports,
    loading,
    error,
    updateReportStatus,
    refetch: fetchReports
  };
};